@use "sass:math";
@use "sass:meta";
@use "../global";
@use "../util/math" as math2;
@use "grid";
@use "gutter";
@use "row";

// Foundation for Sites
// https://get.foundation
// Licensed under MIT Open Source

////
/// @group grid
////

/// Calculates the width of a column based on a number of factors.
///
/// @param {Number|List} $columns
///   Width of the column. Accepts multiple values:
///   - A percentage value will make the column that exact size.
///   - A single digit will make the column span that number of columns wide, taking into account the column count of the parent row.
///   - A list of the format "x of y" (without quotes) will make a column that is *x* columns wide, assuming *y* total columns for the parent.
///
/// @returns {Number} A calculated percentage value.
@function grid-column($columns) {
  @return math2.fraction-to-percentage($columns, $denominator: row.$grid-column-count);
}

/// Creates a grid column.
///
/// @param {Mixed} $columns [$grid-column-count] - Width of the column. Refer to the `grid-column()` function to see possible values.
/// @param {Mixed} $gutters [$grid-column-gutter] - Spacing between columns. Refer to the `grid-column-gutter()` function to see possible values.
@mixin grid-column(
  $columns: row.$grid-column-count,
  $gutters: grid.$grid-column-gutter
) {
  float: global.$global-left;

  @include grid-column-size($columns);

  // Gutters
  @include gutter.grid-column-gutter($gutters: $gutters);
  // Position
  @include grid-col-pos(auto);

}

/// Creates a grid column row. This is the equivalent of adding `.row` and `.column` to the same element.
///
/// @param {Mixed} $gutters [$grid-column-gutter] - Width of the gutters on either side of the column row. Refer to the `grid-column-gutter()` function to see possible values.
@mixin grid-column-row(
  $gutters: grid.$grid-column-gutter
) {
  @include row.grid-row;
  @include grid-column($gutters: $gutters);

  &,
  &:last-child {
    float: none;
  }
}

/// Shorthand for `grid-column()`.
/// @alias grid-column
@function grid-col(
  $columns: row.$grid-column-count
) {
  @return grid-column($columns);
}

/// Shorthand for `grid-column()`.
/// @alias grid-column
@mixin grid-col(
  $columns: row.$grid-column-count,
  $gutters: grid.$grid-column-gutter
) {
  @include grid-column($columns, $gutters);
}

/// Shorthand for `grid-column-row()`.
/// @alias grid-column-row
@mixin grid-col-row(
  $gutters: grid.$grid-column-gutter
) {
  @include grid-column-row($gutters);
}

/// Reposition a column.
///
/// @param {Number|Keyword} $position - It can be:
///   * A number: The column will move equal to the width of the column count
///     specified. A positive number will push the column to the right, while
///     a negative number will pull it to the left.
///   * `center`: Column will be centered
///   * `auto`: Column will be pushed to the left (or to the right for the last column).
@mixin grid-column-position($position) {
  // Auto positioning
  @if $position == auto {
    &, &:last-child:not(:first-child) {
      float: global.$global-left;
      clear: none;
    }

    // Last column alignment
    @if grid.$grid-column-align-edge {
      &:last-child:not(:first-child) {
        float: global.$global-right;
      }
    }
  }

  // Push/pull
  @else if meta.type-of($position) == 'number' {
    $offset: math.percentage(math2.divide($position, row.$grid-column-count));

    position: relative;
    #{global.$global-left}: $offset;
  }

  // Center positioning
  @else if $position == center {
    margin-left: auto;
    margin-right: auto;
    &, &:last-child:not(:first-child) {
      float: none;
      clear: both;
    }
  }

  @else {
    @warn 'Wrong syntax for grid-column-position(). Enter a positive or negative number, "center" or "auto".';
  }
}

/// Reset a position definition.
@mixin grid-column-unposition {
  position: static;
  margin-right: 0;
  margin-left: 0;
  @include grid-column-position(auto);
}

/// Offsets a column to the right by `$n` columns.
/// @param {Number|List} $n - Width to offset by. You can pass in any value accepted by the `grid-column()` mixin, such as `6`, `50%`, or `1 of 2`.
@mixin grid-column-offset($n) {
  margin-#{global.$global-left}: grid-column($n);
}

/// Disable the default behavior of the last column in a row aligning to the opposite edge.
@mixin grid-column-end {
  // This extra specificity is required for the property to be applied
  &:last-child:last-child {
    float: global.$global-left;
  }
}

/// Shorthand for `grid-column-position()`.
/// @alias grid-column-position
@mixin grid-col-pos($position) {
  @include grid-column-position($position);
}

/// Shorthand for `grid-column-unposition()`.
/// @alias grid-column-unposition
@mixin grid-col-unpos {
  @include grid-column-unposition;
}

/// Shorthand for `grid-column-offset()`.
/// @alias grid-column-offset
@mixin grid-col-off($n) {
  @include grid-column-offset($n);
}

/// Shorthand for `grid-column-end()`.
/// @alias grid-column-end
@mixin grid-col-end {
  @include grid-column-end;
}

/// Set the width of a grid column.
///
/// @param {Number|List} $width [$grid-column-count] - Width to make the column. You can pass in any value accepted by the `grid-column()` function, such as `6`, `50%`, or `1 of 2`.
@mixin grid-column-size(
  $columns: row.$grid-column-count
) {
  width: column.grid-column($columns);
}

/// Shorthand for `grid-column-size()`.
/// @alias grid-column-size
@mixin grid-col-size(
  $columns: row.$grid-column-count
) {
  @include grid-column-size($columns);
}
